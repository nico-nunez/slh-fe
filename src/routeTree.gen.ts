/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PublicImport } from './routes/_public'
import { Route as PrivateImport } from './routes/_private'
import { Route as PublicIndexImport } from './routes/_public/index'
import { Route as PublicRegistrationImport } from './routes/_public/registration'
import { Route as PublicLoginImport } from './routes/_public/login'
import { Route as PublicForgotPasswordImport } from './routes/_public/forgot-password'
import { Route as PrivateFooImport } from './routes/_private/foo'
import { Route as PrivateDashboardImport } from './routes/_private/dashboard'

// Create/Update Routes

const PublicRoute = PublicImport.update({
  id: '/_public',
  getParentRoute: () => rootRoute,
} as any)

const PrivateRoute = PrivateImport.update({
  id: '/_private',
  getParentRoute: () => rootRoute,
} as any)

const PublicIndexRoute = PublicIndexImport.update({
  path: '/',
  getParentRoute: () => PublicRoute,
} as any)

const PublicRegistrationRoute = PublicRegistrationImport.update({
  path: '/registration',
  getParentRoute: () => PublicRoute,
} as any)

const PublicLoginRoute = PublicLoginImport.update({
  path: '/login',
  getParentRoute: () => PublicRoute,
} as any)

const PublicForgotPasswordRoute = PublicForgotPasswordImport.update({
  path: '/forgot-password',
  getParentRoute: () => PublicRoute,
} as any)

const PrivateFooRoute = PrivateFooImport.update({
  path: '/foo',
  getParentRoute: () => PrivateRoute,
} as any)

const PrivateDashboardRoute = PrivateDashboardImport.update({
  path: '/dashboard',
  getParentRoute: () => PrivateRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_private': {
      id: '/_private'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivateImport
      parentRoute: typeof rootRoute
    }
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicImport
      parentRoute: typeof rootRoute
    }
    '/_private/dashboard': {
      id: '/_private/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof PrivateDashboardImport
      parentRoute: typeof PrivateImport
    }
    '/_private/foo': {
      id: '/_private/foo'
      path: '/foo'
      fullPath: '/foo'
      preLoaderRoute: typeof PrivateFooImport
      parentRoute: typeof PrivateImport
    }
    '/_public/forgot-password': {
      id: '/_public/forgot-password'
      path: '/forgot-password'
      fullPath: '/forgot-password'
      preLoaderRoute: typeof PublicForgotPasswordImport
      parentRoute: typeof PublicImport
    }
    '/_public/login': {
      id: '/_public/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLoginImport
      parentRoute: typeof PublicImport
    }
    '/_public/registration': {
      id: '/_public/registration'
      path: '/registration'
      fullPath: '/registration'
      preLoaderRoute: typeof PublicRegistrationImport
      parentRoute: typeof PublicImport
    }
    '/_public/': {
      id: '/_public/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PublicIndexImport
      parentRoute: typeof PublicImport
    }
  }
}

// Create and export the route tree

interface PrivateRouteChildren {
  PrivateDashboardRoute: typeof PrivateDashboardRoute
  PrivateFooRoute: typeof PrivateFooRoute
}

const PrivateRouteChildren: PrivateRouteChildren = {
  PrivateDashboardRoute: PrivateDashboardRoute,
  PrivateFooRoute: PrivateFooRoute,
}

const PrivateRouteWithChildren =
  PrivateRoute._addFileChildren(PrivateRouteChildren)

interface PublicRouteChildren {
  PublicForgotPasswordRoute: typeof PublicForgotPasswordRoute
  PublicLoginRoute: typeof PublicLoginRoute
  PublicRegistrationRoute: typeof PublicRegistrationRoute
  PublicIndexRoute: typeof PublicIndexRoute
}

const PublicRouteChildren: PublicRouteChildren = {
  PublicForgotPasswordRoute: PublicForgotPasswordRoute,
  PublicLoginRoute: PublicLoginRoute,
  PublicRegistrationRoute: PublicRegistrationRoute,
  PublicIndexRoute: PublicIndexRoute,
}

const PublicRouteWithChildren =
  PublicRoute._addFileChildren(PublicRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof PublicRouteWithChildren
  '/dashboard': typeof PrivateDashboardRoute
  '/foo': typeof PrivateFooRoute
  '/forgot-password': typeof PublicForgotPasswordRoute
  '/login': typeof PublicLoginRoute
  '/registration': typeof PublicRegistrationRoute
  '/': typeof PublicIndexRoute
}

export interface FileRoutesByTo {
  '': typeof PrivateRouteWithChildren
  '/dashboard': typeof PrivateDashboardRoute
  '/foo': typeof PrivateFooRoute
  '/forgot-password': typeof PublicForgotPasswordRoute
  '/login': typeof PublicLoginRoute
  '/registration': typeof PublicRegistrationRoute
  '/': typeof PublicIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_private': typeof PrivateRouteWithChildren
  '/_public': typeof PublicRouteWithChildren
  '/_private/dashboard': typeof PrivateDashboardRoute
  '/_private/foo': typeof PrivateFooRoute
  '/_public/forgot-password': typeof PublicForgotPasswordRoute
  '/_public/login': typeof PublicLoginRoute
  '/_public/registration': typeof PublicRegistrationRoute
  '/_public/': typeof PublicIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/dashboard'
    | '/foo'
    | '/forgot-password'
    | '/login'
    | '/registration'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | ''
    | '/dashboard'
    | '/foo'
    | '/forgot-password'
    | '/login'
    | '/registration'
    | '/'
  id:
    | '__root__'
    | '/_private'
    | '/_public'
    | '/_private/dashboard'
    | '/_private/foo'
    | '/_public/forgot-password'
    | '/_public/login'
    | '/_public/registration'
    | '/_public/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  PrivateRoute: typeof PrivateRouteWithChildren
  PublicRoute: typeof PublicRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  PrivateRoute: PrivateRouteWithChildren,
  PublicRoute: PublicRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_private",
        "/_public"
      ]
    },
    "/_private": {
      "filePath": "_private.tsx",
      "children": [
        "/_private/dashboard",
        "/_private/foo"
      ]
    },
    "/_public": {
      "filePath": "_public.tsx",
      "children": [
        "/_public/forgot-password",
        "/_public/login",
        "/_public/registration",
        "/_public/"
      ]
    },
    "/_private/dashboard": {
      "filePath": "_private/dashboard.tsx",
      "parent": "/_private"
    },
    "/_private/foo": {
      "filePath": "_private/foo.tsx",
      "parent": "/_private"
    },
    "/_public/forgot-password": {
      "filePath": "_public/forgot-password.tsx",
      "parent": "/_public"
    },
    "/_public/login": {
      "filePath": "_public/login.tsx",
      "parent": "/_public"
    },
    "/_public/registration": {
      "filePath": "_public/registration.tsx",
      "parent": "/_public"
    },
    "/_public/": {
      "filePath": "_public/index.tsx",
      "parent": "/_public"
    }
  }
}
ROUTE_MANIFEST_END */
